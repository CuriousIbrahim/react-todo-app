{"version":3,"sources":["Components/Todo.js","Components/Todos.js","Components/AddTodo.js","App.js","registerServiceWorker.js","index.js"],"names":["Todo","id","console","log","this","props","onDelete","transitionName","transitionEnterTimeout","transitionLeave","onClick","delete","bind","className","name","Component","Todos","todoItems","todos","map","todo","class","uuid","require","AddTodo","state","e","preventDefault","text","value","setState","onAdd","alert","onSubmit","type","placeholder","ref","c","App","count","i","length","splice","saveStateToLocalStorage","push","JSON","parse","localStorage","getItem","setItem","stringify","loadStateFromLocalStorage","setTodos","addTodo","deleteTodo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.791b8d03.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactCSSTransitionGroup from \"react-addons-css-transition-group\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n  delete(id) {\n    console.log(id);\n    this.props.onDelete(id);\n  }\n\n  render() {\n    return (\n      <ReactCSSTransitionGroup\n        transitionName=\"todo-anim\"\n        transitionEnterTimeout={700}\n        transitionLeave={700}\n      >\n        <li\n          onClick={this.delete.bind(this, this.props.id)}\n          className=\"todo\"\n          id={this.props.id}\n        >\n          {this.props.name}\n        </li>\n      </ReactCSSTransitionGroup>\n    );\n  }\n}\n\nexport default Todo;\n","import React, {Component} from 'react';\nimport Todo from './Todo';\n\nclass Todos extends Component {\n\n  delete(id) {\n    this.props.onDelete(id);\n  }\n\n  render() {\n\n    let todoItems = '';\n\n    if (this.props.todos) {\n\n      // The map() method creates a new array with the results of calling a provided function on every element in the calling array.\n      // Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n      todoItems = this.props.todos.map(todo => {\n        return (<Todo id={todo.id} name={todo.name} onDelete={this.props.onDelete.bind(this)}></Todo>)\n      });\n    }\n\n    return (<ul class=\"todos\" onDelete={this.props.onDelete.bind(this)}>{todoItems}</ul>);\n  }\n}\n\nexport default Todos;\n","import React, {Component} from 'react';\nimport './AddTodo.css';\nconst uuid = require('uuid/v1');\n\nclass AddTodo extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      todo: {}\n    }\n  }\n\n  onSubmit(e) {\n\n    e.preventDefault();\n\n    let text = this.todo.value;\n\n    this.todo.value = '';\n\n    if (text !== '') {\n\n      this.setState({\n        todo: {\n          id: uuid(),\n          name: text\n        }\n      }, () => {\n        this.props.onAdd(this.state.todo);\n      });\n    } else {\n      alert(\"You cannot enter an empty value.\")\n    }\n    // console.log('AddTodo.js', this.state.todo);\n\n  }\n\n  render() {\n    return (<div>\n      {/* <h2>Add Todo</h2> */}\n      <form onSubmit={this.onSubmit.bind(this)}>\n        <input id=\"todo-input\" type=\"text\" placeholder=\"Enter Item\" ref={(c) => this.todo = c}></input>\n        <button id=\"add-btn\">Add</button>\n      </form>\n    </div>)\n  }\n}\nexport default AddTodo;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Todos from './Components/Todos';\nimport AddTodo from './Components/AddTodo';\n\nconst uuid = require('uuid/v1');\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n      count: 0\n    }\n  }\n\n  setTodos() {\n    this.state.todos = [\n      {\n        id: uuid(),\n        name: 'Eat breakfast'\n      }, {\n        id: uuid(),\n        name: 'Buy groceries'\n      }\n    ]\n  }\n\n  deleteTodo(id) {\n    let todos = this.state.todos;\n\n    for (let i = 0; i < todos.length; i++) {\n      if (todos[i].id === id) {\n        todos.splice(i, 1);\n        break;\n      }\n    }\n\n    this.setState({todos: todos});\n    this.saveStateToLocalStorage();\n  }\n\n  addTodo(todo) {\n    let todos = this.state.todos;\n\n    todos.push(todo);\n\n    this.setState({todos: todos});\n    this.saveStateToLocalStorage();\n  }\n\n  loadStateFromLocalStorage() {\n    return JSON.parse(localStorage.getItem('todos', this.state.todos));\n  }\n\n  saveStateToLocalStorage() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n  }\n\n  componentWillMount() {\n    if (this.loadStateFromLocalStorage()) {\n      this.setState({todos: this.loadStateFromLocalStorage()})\n    } else {\n      this.setTodos();\n      this.saveStateToLocalStorage();\n    }\n  }\n\n  render() {\n\n    // this.setTodos();\n\n    return (<div className=\"App\">\n      <h1>React Todo App\n        <small id=\"author\">\n          Built by Ibrahim Abdul Hammed</small>\n      </h1>\n\n      <AddTodo onAdd={this.addTodo.bind(this)}/>\n      <Todos todos={this.state.todos} onDelete={this.deleteTodo.bind(this)}/>\n    </div>);\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}